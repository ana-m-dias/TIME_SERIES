rm(list=ls())

library(Rwtss)    # Package Rwtss
library(magrittr) # Package to use pipe operator %>%
library(tibble)   # Package to represent data frame structure
library(tidyr)    # Package to transform data frame structure
library(httr)
library(dplyr)
library(ggplot2)
library(sf)
library(strucchangeRcpp)
library(raster)

# # Declarando as funções

.url_join <- function(url) {
  base <- url
  path <- substr(base, nchar(base), nchar(base))
  if (path != "/") {
    base <- paste(base, "/", sep = "")
  }
  return(base)
}

.get_wtss_time_series <- function(sample = data.frame(), cube = "", bands = c()) {
  url <- paste(
    .url_join(Sys.getenv("BDC_WTSS_URL")),
    "time_series?",
    "coverage=", cube,
    "&attributes=", paste(bands, collapse = ","),
    "&start_date=", as.character(sample$start_date),
    "&end_date=", as.character(sample$end_date),
    "&latitude=", as.double(sample$latitude),
    "&longitude=", as.double(sample$longitude),
    sep = ""
  )
  data <- httr::GET(url, encode = "raw")
  response <- httr::content(data, as = "parsed")
  timeline <- unlist(response$result$timeline)
  time_series_ <- lapply(response$result$attributes, function (ts) {
    ts_ <- list()
    band <- ts$attribute
    ts_[[band]] <- as.double(unlist(ts$values))
    return(as.data.frame(ts_))
  }) %>%
    dplyr::bind_cols() %>%
    dplyr::mutate(
      Index = as.Date(timeline),
      .before = 1
    )
  sample <- sample %>%
    dplyr::mutate(
      cube = as.character(response$query$coverage),
      time_series = list(as_tibble(time_series_))
    ) %>% as.data.frame()
  rownames(sample) <- NULL
  class(sample) <- c("sits", class(sample))
  return(sample)
}


#Leitura dos pontos
shp<-"C:/Users/Usuario/Documents/detecção/pontos_p_bfast_0.shp"
pontos_sf <- shapefile(shp)

#Atribuição das variáveis latitude e longitude
lon<-pontos_sf@coords[,1]
lat<-pontos_sf@coords[,2]
#Criando listas vazias para armazenar os resultados
final_output<-list()

#Criando o loop para iterar a análise para todos os pontos
for (i in 1:length(pontos_sf)){
  points <- tibble::tibble(longitude = lon[i],
                           latitude  = lat[i],
                           label     = pontos_sf$origem_tex[i])
  
  #Acessando o serviço
  Sys.setenv("BDC_WTSS_URL" = "https://data.inpe.br/bdc/wtss/v4/")
  
  index_vegetation <- data.frame(
    longitude = points$longitude,
    latitude = points$latitude,
    start_date = as.Date('2016-01-01'),
    end_date = as.Date('2024-01-01')
  )
  
  index_vegetation <- index_vegetation %>%
    .get_wtss_time_series(
      cube = "LANDSAT-16D-1",
      bands = c("NDVI")
    )
  
  #index_vegetation
  
  
  #Suavizando a série
  indVeg_filt <- pracma::whittaker(index_vegetation$time_series[[1]]$NDVI, lambda = 10, d=2)
  
  #Gerando o objeto série temporal
  timeserires_obj <- stats::ts(indVeg_filt, start = c(2016, 1), end= c(2024, 1), frequency = 23)
  
  #Aplicando o bfast
  bf<-bfast::bfast(timeserires_obj, h=0.125, season="harmonic", max.iter=3, type="OLS-MOSUM")

  plot(bf, main = sprintf("Ponto %d", i))
  #Condicional para atribuir zero aos casos onde não é detectada a quebra
  if (length(bf$Mags)!=1) {
    
    #Pegando a maior magnitude negativa (valor mínimo) (É uma abordagem mais simples, você pode criar regras diferentes)
    
    min_mag<-max(bf$Mags[,3])
    
    
    #Pegando a data onde ocorreu a maior quebra negativa
    date<-index_vegetation$time_series[[1]]$Index[bf$output[[1]]$Vt.bp[which.min(bf$Mags[,3])]]
    
    #Pegando o ano
    year <- lubridate::year(date)
    
    #Guardando o resultado da iteração, juntamente com os dados do ponto (data e classe)
    output <- data.frame(lat[i],lon[i],year,date,min_mag,pontos_sf$DataHora[i],pontos_sf$origem_tex[i])
    
  } else {output<-data.frame(lat[i],lon[i],year,date,min_mag,pontos_sf$DataHora[i],pontos_sf$origem_tex[i])}
  
  #Guardando na lista com todos os resultados para cada iteração
  final_output[[i]]<-output
  
  
  
  
}


df <- plyr::ldply(final_output, data.frame)


df$pontos_sf.DataHora.i.[1:50] <- as.Date(df$pontos_sf.DataHora.i.[1:50], format = "%Y/%m/%d")
df$pontos_sf.DataHora.i.[51:100] <- as.Date(df$pontos_sf.DataHora.i.[51:100], format = "%d/%m/%Y")

df$pontos_sf.DataHora.i.<-as.Date(as.numeric(df$pontos_sf.DataHora.i.))

df$pontos_sf.DataHora.i.[101:150] <- NA

which(abs(df$pontos_sf.DataHora.i.-df$date)<60)


which(abs(df$pontos_sf.DataHora.i.-df$date)<120)

boxplot(df$min_mag[which(df$pontos_sf.origem_tex.i.=="queimada")])

boxplot(df$min_mag[which(df$pontos_sf.origem_tex.i.=="desmatamen")])

boxplot(df$min_mag[which(df$pontos_sf.origem_tex.i.=="vegetacao")])


boxplot(
  df$min_mag[which(df$pontos_sf.origem_tex.i. == "queimada")],
  df$min_mag[which(df$pontos_sf.origem_tex.i. == "desmatamen")],
  df$min_mag[which(df$pontos_sf.origem_tex.i. == "vegetacao")],
  names = c("Queimada", "Desmatamento", "Vegetação"),
  main = "Comparação de Maior Magnitude por Tipo de Origem",
  ylab = "Maior Magnitude Registrada",
  ylim = c(-10000, 5000),  # Ajuste do eixo y
  col = c("darkred", "darkolivegreen", "darkgreen"),  # Cores personalizadas
  axes = FALSE  # Remover eixos padrão para customizar depois
)

# Adicionar eixos personalizados
axis(1, at = 1:3, labels = c("Queimada", "Desmatamento", "Vegetação"))
axis(2, at = c(-10000, -5000, 0, 5000), labels = c("-1", "-0.5", "0", "0.5"))

# Adicionar a borda do boxplot
box()
